/*
 * AlertListener.java
 *
 * Created on May 24, 2007, 9:56 AM
 */

package com.wms.logos.iframe.gui;

import com.wms.logos.config.IConfigParameter;
import com.wms.logos.icomponent.IComponentInterface;
import com.wms.logos.util.PrintUtils;
import javax.swing.JPanel;
import javax.swing.JViewport;

/**
 *
 * @author mstemen
 */
public class AlertView extends javax.swing.JPanel implements LogosViewInterface
{    
    private short alertCountValue = 0;
    private boolean m_ShowEventCountPerLine = false;
    private String viewTitle = "Indication Alert View";   

    private boolean autoView;
    
    /** Creates new form AlertListener */
    public AlertView()
    {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        IndicationQueryDataPanel = new javax.swing.JPanel();
        FilterPanel = new javax.swing.JPanel();
        currentFilterChoice = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        queryStrPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        QueryStringValue = new javax.swing.JLabel();
        alertTabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        alertPane = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        loggedAlertsPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusPane = new javax.swing.JTextArea();
        HandlerPanel = new javax.swing.JPanel();
        HandlerClassPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        CIMHandlerClassName = new javax.swing.JLabel();
        HandlerAlertCountPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        alertCount = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(204, 204, 204));
        IndicationQueryDataPanel.setLayout(new java.awt.GridLayout(1, 0, 15, 0));

        IndicationQueryDataPanel.setBackground(new java.awt.Color(204, 204, 204));
        IndicationQueryDataPanel.setPreferredSize(new java.awt.Dimension(500, 20));
        FilterPanel.setLayout(new java.awt.BorderLayout(10, 0));

        FilterPanel.setBackground(new java.awt.Color(102, 0, 51));
        FilterPanel.setMinimumSize(new java.awt.Dimension(250, 30));
        FilterPanel.setPreferredSize(new java.awt.Dimension(250, 20));
        currentFilterChoice.setForeground(new java.awt.Color(255, 255, 255));
        currentFilterChoice.setText(" Current Filter");
        currentFilterChoice.setRequestFocusEnabled(false);
        FilterPanel.add(currentFilterChoice, java.awt.BorderLayout.WEST);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));
        FilterPanel.add(jComboBox1, java.awt.BorderLayout.CENTER);

        IndicationQueryDataPanel.add(FilterPanel);

        queryStrPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        queryStrPanel.setBackground(new java.awt.Color(204, 204, 204));
        queryStrPanel.setMinimumSize(new java.awt.Dimension(76, 20));
        queryStrPanel.setPreferredSize(new java.awt.Dimension(276, 20));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Query String:");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerifyInputWhenFocusTarget(false);
        queryStrPanel.add(jLabel1);

        QueryStringValue.setFont(new java.awt.Font("Tahoma", 0, 10));
        QueryStringValue.setPreferredSize(new java.awt.Dimension(200, 20));
        queryStrPanel.add(QueryStringValue);

        IndicationQueryDataPanel.add(queryStrPanel);

        add(IndicationQueryDataPanel, java.awt.BorderLayout.NORTH);

        alertTabbedPane.setBackground(new java.awt.Color(153, 0, 51));
        alertTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alerts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Copperplate Gothic Light", 1, 14)));
        alertTabbedPane.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        alertPane.setColumns(20);
        alertPane.setEditable(false);
        alertPane.setRows(5);
        jScrollPane3.setViewportView(alertPane);

        jPanel3.add(jScrollPane3);

        alertTabbedPane.addTab("Current", jPanel3);

        loggedAlertsPane.setBackground(new java.awt.Color(255, 255, 153));
        loggedAlertsPane.setEditable(false);
        loggedAlertsPane.setMinimumSize(new java.awt.Dimension(600, 600));
        jScrollPane1.setViewportView(loggedAlertsPane);

        alertTabbedPane.addTab("Detail", jScrollPane1);

        statusPane.setBackground(new java.awt.Color(0, 0, 0));
        statusPane.setColumns(20);
        statusPane.setEditable(false);
        statusPane.setForeground(new java.awt.Color(51, 255, 0));
        statusPane.setRows(5);
        jScrollPane2.setViewportView(statusPane);

        alertTabbedPane.addTab("Status", jScrollPane2);

        add(alertTabbedPane, java.awt.BorderLayout.CENTER);

        HandlerPanel.setLayout(new java.awt.BorderLayout());

        HandlerPanel.setBackground(new java.awt.Color(102, 0, 0));
        HandlerPanel.setForeground(new java.awt.Color(204, 204, 204));
        HandlerClassPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        HandlerClassPanel.setBackground(new java.awt.Color(153, 0, 51));
        HandlerClassPanel.setMaximumSize(new java.awt.Dimension(305, 20));
        HandlerClassPanel.setMinimumSize(new java.awt.Dimension(305, 20));
        HandlerClassPanel.setPreferredSize(new java.awt.Dimension(305, 20));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("CIMHandlerClass: ");
        jLabel4.setMaximumSize(new java.awt.Dimension(85, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(85, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(85, 20));
        HandlerClassPanel.add(jLabel4);

        CIMHandlerClassName.setFont(new java.awt.Font("Tahoma", 0, 10));
        CIMHandlerClassName.setForeground(new java.awt.Color(255, 255, 255));
        CIMHandlerClassName.setText("Test value to set the proper width");
        CIMHandlerClassName.setMaximumSize(new java.awt.Dimension(151, 20));
        CIMHandlerClassName.setMinimumSize(new java.awt.Dimension(151, 20));
        CIMHandlerClassName.setPreferredSize(new java.awt.Dimension(151, 20));
        HandlerClassPanel.add(CIMHandlerClassName);

        HandlerPanel.add(HandlerClassPanel, java.awt.BorderLayout.WEST);

        HandlerAlertCountPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        HandlerAlertCountPanel.setBackground(new java.awt.Color(102, 0, 51));
        HandlerAlertCountPanel.setMaximumSize(new java.awt.Dimension(150, 20));
        HandlerAlertCountPanel.setMinimumSize(new java.awt.Dimension(150, 20));
        HandlerAlertCountPanel.setPreferredSize(new java.awt.Dimension(150, 20));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Alert Count: ");
        jLabel3.setMaximumSize(new java.awt.Dimension(70, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(70, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(70, 20));
        HandlerAlertCountPanel.add(jLabel3);

        alertCount.setForeground(new java.awt.Color(255, 255, 255));
        alertCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alertCount.setText("0");
        alertCount.setMaximumSize(new java.awt.Dimension(28, 20));
        alertCount.setMinimumSize(new java.awt.Dimension(28, 20));
        alertCount.setPreferredSize(new java.awt.Dimension(28, 20));
        HandlerAlertCountPanel.add(alertCount);

        HandlerPanel.add(HandlerAlertCountPanel, java.awt.BorderLayout.EAST);

        add(HandlerPanel, java.awt.BorderLayout.PAGE_END);

    }// </editor-fold>//GEN-END:initComponents
    
    /**
     *
     * @param message
     */
    public void fwWrite(String message)
    {
        writeAlert( message );
    }
    
    public synchronized void clear()
    {
        alertPane.setText("");
        alertCountValue = 0;
        this.alertCount.setText( String.valueOf( alertCountValue ));
    }
    
    public synchronized void fwWriteStatus( String message )
    {
        String currentText = statusPane.getText();
        
        // statusLineNumber = String.valueOf(statusCountValue );
        StringBuffer newText = null;
        if( currentText != null && currentText.length() <= 0 )
        {
            newText = new StringBuffer( message ).append('\n');
        }
        else if( currentText != null )
        {
            newText = new StringBuffer(currentText).append( message ).append('\n');
        }
        else
        {
            if( currentText == null )
            {
                System.out.println("Unable to get current status text."  );
            }
        }
        this.statusPane.setText(newText.toString());
        this.alertTabbedPane.setSelectedIndex(2);
    }
    
    private void writeStatus( String message )
    {
        String currentText = statusPane.getText();        
        
        StringBuffer newText = null;
        if( currentText != null && currentText.length() <= 0 )
        {
            newText = new StringBuffer( message );
            if( ! message.endsWith("\n"))
            {
                newText.append('\n');
            }
        }
        else if( currentText != null )
        {
            newText = new StringBuffer(currentText).append( message );                        
            if( ! message.endsWith("\n"))
            {
                newText.append('\n');
            }

        }
        else
        {
            if( currentText == null )
            {
                System.out.println("Unable to get current status text.");
            }
        }
        this.statusPane.setText(newText.toString());
        this.alertTabbedPane.setSelectedIndex(2);
    }
    
    private void writeAlert(String message)
    {
        String previousAlert = alertPane.getText();
        this.alertCount.setText( String.valueOf( ++alertCountValue ));
        if( previousAlert != null && previousAlert.length() > 0 )
        {
            logAlert(previousAlert);
        }
        
        // StringBuffer newText = new StringBuffer( message ).append('\n');
        String tmpStr = new String( message );
        String cleanStr = PrintUtils.removeDoubleLines(tmpStr, false );
        alertPane.setText( cleanStr );
    }
    
    public void write(String[] messages)
    {
//        String currentText = alertPane.getText();
//        StringBuffer newText = new StringBuffer( currentText );
//        for( int i = 0; i < messages.length; i++ )
//        {
//            newText.append( messages[i] ).append('\n');
//        }
//        alertPane.setText( newText.toString() );
    }
    
    public JViewport getViewPort()
    {
        return this.getViewPort();
    }
    
    public JPanel getPanel()
    {
        return this;
    }
    
    public String fwGetName()
    {
        return("alert");
    }
    
    public IComponentInterface fwGetRoute()
    {
        return this;
    }
    
    public LogosViewInterface getView(String viewName) throws ViewException
    {
        return this;
    }
    
    public void writeSpecial(String message)
    {
        //TODO: NO-OP for now
    }
    
    private void logAlert( String message )
    {
        String currentLog = this.loggedAlertsPane.getText();
        StringBuffer newLog = null;
        if( currentLog != null )
        {
            newLog = new StringBuffer( currentLog ).append( message );
        }
        else // first entry
        {
            newLog = new StringBuffer( message );
        }
        this.loggedAlertsPane.setText( newLog.toString() );
    }
    
    public void fwWrite(String msg, String target) throws FWTargetException
    {
    }
    
    public void fwWrite(Exception e)
    {
    }
    
    public void fwWrite(Exception e, String target) throws FWTargetException
    {
    }
    
    public void fwWrite(FWWriteLevel level, String msg)
    {                
        if( level == FWWriteLevel.INFO )
        {                                    
            // msg = PrintUtils.removeDoubleLines( new String(msg), false);
            this.writeAlert( msg );
        }
        else if( level == FWWriteLevel.STATUS )
        {
            this.writeStatus( msg );
        }
            
    }
    
    public void fwWrite(FWWriteLevel level, String msg, String target) throws FWTargetException
    {
    }
    
    public void fwWrite(FWWriteLevel level, Exception e)
    {
    }
    
    public void fwWrite(FWWriteLevel level, Exception e, String target) throws FWTargetException
    {
    }
    
    public String getTitle()
    {
        return this.viewTitle;
    }

    public void setAutoView(boolean choice)
    {
        autoView = choice;
    }

    public void initalizeFromFWParams(IConfigParameter data)
    {
        //TODO: this should have proper cast checking as that exception can be nasty at RunTime in Java
  
        // this.HandlerPanel.repaint();        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CIMHandlerClassName;
    private javax.swing.JPanel FilterPanel;
    private javax.swing.JPanel HandlerAlertCountPanel;
    private javax.swing.JPanel HandlerClassPanel;
    private javax.swing.JPanel HandlerPanel;
    private javax.swing.JPanel IndicationQueryDataPanel;
    private javax.swing.JLabel QueryStringValue;
    private javax.swing.JLabel alertCount;
    private javax.swing.JTextArea alertPane;
    private javax.swing.JTabbedPane alertTabbedPane;
    private javax.swing.JLabel currentFilterChoice;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane loggedAlertsPane;
    private javax.swing.JPanel queryStrPanel;
    private javax.swing.JTextArea statusPane;
    // End of variables declaration//GEN-END:variables

    public void initalizeFromFWParams(FWParameterData EventParmData) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

  
}
